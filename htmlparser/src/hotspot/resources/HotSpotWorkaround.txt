/*
 * Copyright (c) 2010 Mozilla Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 */

   /**
    * compressed returnValue:
    *   int     returnState     = returnValue >> 33
    *   boolean breakOuterState = ((returnValue >> 32) & 0x1) != 0)
    *   int     pos             = returnValue & 0xFFFFFFFF // same as (int)returnValue
    */  
    @SuppressWarnings("unused") private long workAroundHotSpotHugeMethodLimit(
            int state, char c, int pos, @NoLength char[] buf,
            boolean reconsume, int returnState, int endPos) throws SAXException {
        stateloop: for (;;) {
            switch (state) {
                // BEGIN HOTSPOT WORKAROUND
                default:
                    long returnStateAndPos = workAroundHotSpotHugeMethodLimit(
                            state, c, pos, buf, reconsume, returnState, endPos);
                    pos = (int)returnStateAndPos; // 5.1.3 in the Java spec
                    returnState = (int)(returnStateAndPos >> 33);
                    state = stateSave;
                    if ( (pos == endPos) || ( (((int)(returnStateAndPos >> 32)) & 0x1) != 0) ) {
                        break stateloop;
                    }
                    continue stateloop;
                // END HOTSPOT WORKAROUND
                default:
                    assert !reconsume : "Must not reconsume when returning from HotSpot workaround.";
                    stateSave = state;
                    return (((long)returnState) << 33) | pos;
            }
        }
        assert !reconsume : "Must not reconsume when returning from HotSpot workaround.";
        stateSave = state;
        return (((long)returnState) << 33) | (1L << 32) | pos ;
    }
